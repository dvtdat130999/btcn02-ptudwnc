{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","renderSquare","i","winLine","key","squares","includes","row","j","push","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","isAscending","setIsAscending","isAscendingClone","historyClone","stepNumberClone","current","winInfo","calculateWinner","winner","moves","map","step","move","lastMoveSquare","col","Math","floor","desc","jumpTo","isDraw","reverse","slice","length","concat","handleClick","line","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.692a67ba.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nfunction Square(props) {\n    //chon loai square tu index.css\n    const className='square'+(props.highlight?' highlight':'');\n    return (\n        <button className={className} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nfunction Board(props) {\n    const renderSquare=(i)=>{\n        const winLine=props.winLine;//lay winline duoc pass tu Game thanh props cua Board\n        return (\n            <Square\n                key={i}\n                value={props.squares[i]}\n                onClick={() => props.onClick(i)}\n                //if the current index of squares is included in winline array\n                highlight={winLine&&winLine.includes(i)}\n            />\n        );\n    };\n\n    const boardSize=3;\n    let squares=[];\n    for(let i=0;i<boardSize;i++)\n    {\n        let row=[];\n        for(let j=0;j<boardSize;j++)\n        {\n            row.push(renderSquare(i*boardSize+j));\n\n        }\n        squares.push(<div key={i} className=\"board-row\">{row} </div>)\n    }\n    return (\n\n        <div>\n            {squares}\n        </div>\n    );\n\n}\n\nfunction Game (props) {\n    const [history,setHistory]=useState([{ squares: Array(9).fill(null)}]);\n    const [stepNumber,setStepNumber]=useState(0);\n    const [xIsNext,setXIsNext]=useState(true);\n    const [isAscending,setIsAscending]=useState(true);\n\n    const handleClick=(i)=>{\n        const historyClone=history.slice(0,stepNumber+1);\n        const current = historyClone[historyClone.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares).winner || squares[i]) {\n            return;\n        }\n        squares[i] = xIsNext ? \"X\" : \"O\";\n        setHistory(historyClone.concat([\n            {\n                squares: squares,\n                //vi tri cua buoc vua di\n                lastMoveSquare:i\n            }\n        ]));\n        setStepNumber(historyClone.length);\n        setXIsNext(!xIsNext);\n\n    };\n\n\n\n    const jumpTo=(step)=> {\n        setStepNumber(step);\n        setXIsNext((step%2)===0);\n    };\n    const handleSortToggle=()=>{\n        setIsAscending(!isAscending);\n    };\n\n    const isAscendingClone=isAscending;\n    const historyClone=history;\n    const stepNumberClone=stepNumber;\n\n    const current = historyClone[stepNumberClone];\n    const winInfo = calculateWinner(current.squares);\n    const winner = winInfo.winner;\n\n    let moves = historyClone.map((step, move) => {\n        const lastMoveSquare=step.lastMoveSquare;\n        const col=1+lastMoveSquare%3;\n        const row=1+Math.floor(lastMoveSquare/3);\n\n        const desc = move ?\n            `Go to move #${move} (${col}, ${row})` :\n            'Go to game start';\n\n        return (\n            <li key={move}>\n                <button\n                    className={move ===stepNumberClone? 'move-list-item-selected':''}\n                    onClick={() => jumpTo(move)}>{desc}\n                </button>\n            </li>\n        );\n    });\n    let status;\n    if (winner) {\n        status = \"Winner: \" + winner;\n    }else\n    {\n        if(winInfo.isDraw)\n        {\n            status=\"Draw\";\n        }\n        else\n        {\n            status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n\n        }\n    }\n\n    if (!isAscendingClone) {\n        moves.reverse();\n    }\n    return (\n        <div className=\"game\">\n            <div className=\"game-board\">\n                <Board\n                    squares={current.squares}\n                    onClick={i => handleClick(i)}\n                    winLine={winInfo.line}//pass winline thanh props cho Board\n                />\n            </div>\n            <div className=\"game-info\">\n                <div>{status}</div>\n                <button onClick={()=>handleSortToggle()}>\n                    {isAscendingClone?'Descending':'Ascending'}\n                </button>\n                <ol>{moves}</ol>\n            </div>\n        </div>\n    );\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                winner:squares[a],\n                line:lines[i],\n                isDraw:false//kiem tra hoa\n            };\n        }\n    }\n    let isDraw=true;\n    for(let i=0;i<squares.length;i++)\n    {\n        if(squares[i]===null)\n        {\n            isDraw=false;\n            break;\n        }\n    }\n    return {\n        winner: null,\n        line:null,\n        isDraw: isDraw\n\n    };\n}\n"],"sourceRoot":""}