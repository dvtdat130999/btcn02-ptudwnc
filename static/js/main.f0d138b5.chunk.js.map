{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Square","props","className","highlight","onClick","value","Board","i","winLine","this","key","squares","includes","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","isAscending","slice","length","calculateWinner","winner","setState","concat","lastMoveSquare","step","status","stepNum","current","winInfo","moves","map","move","col","Math","floor","desc","jumpTo","isDraw","reverse","handleClick","line","handleSortToggle","lines","a","b","c","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,sMCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbN,SAASC,EAAOC,GAEZ,IAAMC,EAAU,UAAUD,EAAME,UAAU,aAAa,IACvD,OACI,4BAAQD,UAAWA,EAAWE,QAASH,EAAMG,SACxCH,EAAMI,O,IAKbC,E,2KACWC,GAAI,IAAD,OACNC,EAAQC,KAAKR,MAAMO,QACzB,OACI,kBAACR,EAAD,CACIU,IAAKH,EACLF,MAAOI,KAAKR,MAAMU,QAAQJ,GAC1BH,QAAS,kBAAM,EAAKH,MAAMG,QAAQG,IAElCJ,UAAWK,GAASA,EAAQI,SAASL,O,+BAQ7C,IAFA,IACII,EAAQ,GACJJ,EAAE,EAAEA,EAFI,EAEQA,IACxB,CAEI,IADA,IAAIM,EAAI,GACAC,EAAE,EAAEA,EALA,EAKYA,IAEpBD,EAAIE,KAAKN,KAAKO,aAPN,EAOmBT,EAAYO,IAG3CH,EAAQI,KAAK,yBAAKL,IAAKH,EAAGL,UAAU,aAAaW,EAApC,MAEjB,OACI,6BACGF,O,GA7BKM,IAAMC,WAmCpBC,E,kDACF,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IACDmB,MAAQ,CACTC,QAAS,CACL,CACIV,QAASW,MAAM,GAAGC,KAAK,QAG/BC,WAAY,EACZC,SAAS,EACTC,aAAY,GAVD,E,wDAcPnB,GACR,IAAMc,EAAUZ,KAAKW,MAAMC,QAAQM,MAAM,EAAGlB,KAAKW,MAAMI,WAAa,GAE9Db,EADUU,EAAQA,EAAQO,OAAS,GACjBjB,QAAQgB,QAC5BE,EAAgBlB,GAASmB,QAAUnB,EAAQJ,KAG/CI,EAAQJ,GAAKE,KAAKW,MAAMK,QAAU,IAAM,IACxChB,KAAKsB,SAAS,CACVV,QAASA,EAAQW,OAAO,CACpB,CACIrB,QAASA,EAETsB,eAAe1B,KAGvBiB,WAAYH,EAAQO,OACpBH,SAAUhB,KAAKW,MAAMK,a,6BAItBS,GACHzB,KAAKsB,SAAS,CACVP,WAAYU,EACZT,QAAUS,EAAO,IAAO,M,yCAK5BzB,KAAKsB,SAAS,CACVL,aAAajB,KAAKW,MAAMM,gB,+BAGtB,IA8BFS,EA9BC,OACCT,EAAcjB,KAAKW,MAAMM,YAEzBL,EAAUZ,KAAKW,MAAMC,QACrBe,EAAQ3B,KAAKW,MAAMI,WACnBa,EAAUhB,EAAQe,GAElBE,EAAUT,EAAgBQ,EAAQ1B,SAClCmB,EAASQ,EAAQR,OAEnBS,EAAQlB,EAAQmB,KAAI,SAACN,EAAMO,GAC3B,IAAMR,EAAeC,EAAKD,eACpBS,EAAI,EAAET,EAAe,EACrBpB,EAAI,EAAE8B,KAAKC,MAAMX,EAAe,GAEhCY,EAAOJ,EAAI,sBACEA,EADF,aACWC,EADX,aACmB7B,EADnB,KAEb,mBAGJ,OACI,wBAAIH,IAAK+B,GACL,4BACIvC,UAAWuC,IAAQL,EAAU,0BAA0B,GACvDhC,QAAS,kBAAM,EAAK0C,OAAOL,KAAQI,OA0BnD,OAlBIV,EADAL,EACS,WAAaA,EAGnBQ,EAAQS,OAEA,OAIE,iBAAmBtC,KAAKW,MAAMK,QAAU,IAAM,KAM1DC,GACDa,EAAMS,UAGN,yBAAK9C,UAAU,QACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CACIS,QAAS0B,EAAQ1B,QACjBP,QAAS,SAAAG,GAAC,OAAI,EAAK0C,YAAY1C,IAC/BC,QAAS8B,EAAQY,QAGzB,yBAAKhD,UAAU,aACX,6BAAMiC,GACN,4BAAQ/B,QAAS,kBAAI,EAAK+C,qBACrBzB,EAAY,aAAa,aAE9B,4BAAKa,S,GAhHNtB,IAAMC,WA2HzB,SAASW,EAAgBlB,GAWrB,IAVA,IAAMyC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF7C,EAAI,EAAGA,EAAI6C,EAAMxB,OAAQrB,IAAK,CAAC,IAAD,cACjB6C,EAAM7C,GADW,GAC5B8C,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI5C,EAAQ0C,IAAM1C,EAAQ0C,KAAO1C,EAAQ2C,IAAM3C,EAAQ0C,KAAO1C,EAAQ4C,GAClE,MAAO,CACHzB,OAAOnB,EAAQ0C,GACfH,KAAKE,EAAM7C,GACXwC,QAAO,GAKnB,IADA,IAAIA,GAAO,EACHxC,EAAE,EAAEA,EAAEI,EAAQiB,OAAOrB,IAEzB,GAAgB,OAAbI,EAAQJ,GACX,CACIwC,GAAO,EACP,MAGR,MAAO,CACHjB,OAAQ,KACRoB,KAAK,KACLH,OAAQA,GAnChBS,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDxC5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0d138b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nfunction Square(props) {\n    //chon loai square tu index.css\n    const className='square'+(props.highlight?' highlight':'');\n    return (\n        <button className={className} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        const winLine=this.props.winLine;//lay winline duoc pass tu Game thanh props cua Board\n        return (\n            <Square\n                key={i}\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                //if the current index of squares is included in winline array\n                highlight={winLine&&winLine.includes(i)}\n            />\n        );\n    }\n\n    render() {\n        const boardSize=3;\n        let squares=[];\n        for(let i=0;i<boardSize;i++)\n        {\n            let row=[];\n            for(let j=0;j<boardSize;j++)\n            {\n                row.push(this.renderSquare(i*boardSize+j));\n\n            }\n            squares.push(<div key={i} className=\"board-row\">{row} </div>)\n        }\n        return (\n            <div>\n              {squares}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: Array(9).fill(null)\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true,\n            isAscending:true\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares).winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares,\n                    //vi tri cua buoc vua di\n                    lastMoveSquare:i\n                }\n            ]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n    handleSortToggle()\n    {\n        this.setState({\n            isAscending:!this.state.isAscending\n        })\n    }\n    render() {\n        const isAscending = this.state.isAscending;\n\n        const history = this.state.history;\n        const stepNum=this.state.stepNumber;\n        const current = history[stepNum];\n\n        const winInfo = calculateWinner(current.squares);\n        const winner = winInfo.winner;\n\n        let moves = history.map((step, move) => {\n            const lastMoveSquare=step.lastMoveSquare;\n            const col=1+lastMoveSquare%3;\n            const row=1+Math.floor(lastMoveSquare/3);\n\n            const desc = move ?\n                `Go to move #${move} (${col}, ${row})` :\n                'Go to game start';\n\n\n            return (\n                <li key={move}>\n                    <button\n                        className={move ===stepNum ? 'move-list-item-selected':''}\n                        onClick={() => this.jumpTo(move)}>{desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + winner;\n        }else\n        {\n            if(winInfo.isDraw)\n            {\n                status=\"Draw\";\n            }\n            else\n            {\n                status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n\n            }\n        }\n\n\n        if (!isAscending) {\n            moves.reverse();\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={i => this.handleClick(i)}\n                        winLine={winInfo.line}//pass winline thanh props cho Board\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <button onClick={()=>this.handleSortToggle()}>\n                        {isAscending?'Descending':'Ascending'}\n                    </button>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                winner:squares[a],\n                line:lines[i],\n                isDraw:false//kiem tra hoa\n            };\n        }\n    }\n    let isDraw=true;\n    for(let i=0;i<squares.length;i++)\n    {\n        if(squares[i]===null)\n        {\n            isDraw=false;\n            break;\n        }\n    }\n    return {\n        winner: null,\n        line:null,\n        isDraw: isDraw\n\n    };\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}